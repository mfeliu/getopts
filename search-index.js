var N = null;var searchIndex = {};
searchIndex["getopts"]={"doc":"Simple getopt alternative.","items":[[3,"Options","getopts","A description of the options that a program can handle.",N,N],[3,"Matches","","The result of checking command line arguments. Contains a vector of matches and a vector of free strings.",N,N],[12,"free","","Free string fragments",0,N],[4,"ParsingStyle","","What parsing style to use when parsing arguments.",N,N],[13,"FloatingFrees","","Flags and \"free\" arguments can be freely inter-mixed.",1,N],[13,"StopAtFirstFree","","As soon as a \"free\" argument (i.e. non-flag) is encountered, stop considering any remaining arguments as flags.",1,N],[4,"HasArg","","Describes whether an option has an argument.",N,N],[13,"Yes","","The option requires an argument.",2,N],[13,"No","","The option takes no argument.",2,N],[13,"Maybe","","The option argument is optional.",2,N],[4,"Occur","","Describes how often an option may occur.",N,N],[13,"Req","","The option occurs once.",3,N],[13,"Optional","","The option occurs at most once.",3,N],[13,"Multi","","The option occurs zero or more times.",3,N],[4,"Fail","","The type returned when the command line does not conform to the expected format. Use the `Debug` implementation to output detailed information.",N,N],[13,"ArgumentMissing","","The option requires an argument but none was passed.",4,N],[13,"UnrecognizedOption","","The passed option is not declared among the possible options.",4,N],[13,"OptionMissing","","A required option is not present.",4,N],[13,"OptionDuplicated","","A single occurrence option is being used multiple times.",4,N],[13,"UnexpectedArgument","","There's an argument being passed to a non-argument option.",4,N],[6,"Result","","The result of parsing a command line with a set of options.",N,N],[11,"new","","Create a blank set of options.",5,[[],["options"]]],[11,"parsing_style","","Set the parsing style.",5,[[["self"],["parsingstyle"]],["options"]]],[11,"long_only","","Set or clear \"long options only\" mode.",5,[[["self"],["bool"]],["options"]]],[11,"opt","","Create a generic option group, stating all parameters explicitly.",5,[[["self"],["str"],["str"],["str"],["str"],["hasarg"],["occur"]],["options"]]],[11,"optflag","","Create a long option that is optional and does not take an argument.",5,[[["self"],["str"],["str"],["str"]],["options"]]],[11,"optflagmulti","","Create a long option that can occur more than once and does not take an argument.",5,[[["self"],["str"],["str"],["str"]],["options"]]],[11,"optflagopt","","Create a long option that is optional and takes an optional argument.",5,[[["self"],["str"],["str"],["str"],["str"]],["options"]]],[11,"optmulti","","Create a long option that is optional, takes an argument, and may occur multiple times.",5,[[["self"],["str"],["str"],["str"],["str"]],["options"]]],[11,"optopt","","Create a long option that is optional and takes an argument.",5,[[["self"],["str"],["str"],["str"],["str"]],["options"]]],[11,"reqopt","","Create a long option that is required and takes an argument.",5,[[["self"],["str"],["str"],["str"],["str"]],["options"]]],[11,"parse","","Parse command line arguments according to the provided options.",5,[[["self"],["c"]],["result"]]],[11,"short_usage","","Derive a short one-line usage summary from a set of long options.",5,[[["self"],["str"]],["string"]]],[11,"usage","","Derive a formatted message from a set of options.",5,[[["self"],["str"]],["string"]]],[11,"usage_with_format","","Derive a custom formatted message from a set of options. The formatted options provided to a closure as an iterator.",5,[[["self"],["f"]],["string"]]],[11,"opt_defined","","Returns true if an option was defined",0,[[["self"],["str"]],["bool"]]],[11,"opt_present","","Returns true if an option was matched.",0,[[["self"],["str"]],["bool"]]],[11,"opt_count","","Returns the number of times an option was matched.",0,[[["self"],["str"]],["usize"]]],[11,"opts_present","","Returns true if any of several options were matched.",0,N],[11,"opts_str","","Returns the string argument supplied to one of several matching options or `None`.",0,N],[11,"opt_strs","","Returns a vector of the arguments provided to all matches of the given option.",0,[[["self"],["str"]],["vec",["string"]]]],[11,"opt_str","","Returns the string argument supplied to a matching option or `None`.",0,[[["self"],["str"]],["option",["string"]]]],[11,"opt_default","","Returns the matching string, a default, or `None`.",0,[[["self"],["str"],["str"]],["option",["string"]]]],[11,"opt_get","","Returns some matching value or `None`.",0,[[["self"],["str"]],["result",["option"]]]],[11,"opt_get_default","","Returns a matching value or default.",0,[[["self"],["str"],["t"]],["result"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"eq","","",1,[[["self"],["parsingstyle"]],["bool"]]],[11,"eq","","",2,[[["self"],["hasarg"]],["bool"]]],[11,"eq","","",3,[[["self"],["occur"]],["bool"]]],[11,"eq","","",0,[[["self"],["matches"]],["bool"]]],[11,"ne","","",0,[[["self"],["matches"]],["bool"]]],[11,"eq","","",4,[[["self"],["fail"]],["bool"]]],[11,"ne","","",4,[[["self"],["fail"]],["bool"]]],[11,"clone","","",1,[[["self"]],["parsingstyle"]]],[11,"clone","","",2,[[["self"]],["hasarg"]]],[11,"clone","","",3,[[["self"]],["occur"]]],[11,"clone","","",0,[[["self"]],["matches"]]],[11,"clone","","",4,[[["self"]],["fail"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"description","","",4,[[["self"]],["str"]]]],"paths":[[3,"Matches"],[4,"ParsingStyle"],[4,"HasArg"],[4,"Occur"],[4,"Fail"],[3,"Options"]]};
initSearch(searchIndex);
